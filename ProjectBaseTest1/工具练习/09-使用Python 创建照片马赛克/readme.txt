来源: 实验楼
链接: https://www.shiyanlou.com/courses/1041
本课程内容，由作者授权实验楼发布，未经允许，禁止转载、下载及非法传播

我们将目标图像划分成较小图像的网格，并用适当的图像替换网格中的每一小块，创建原始图像的照片马赛克。

《Pyhton极客项目编程》  https://www.epubit.com/book/detail/22349

实验知识点
    用 Python 图像库（PIL）创建图像；
    计算图像的平均 RGB 值；
    剪切图像；
    通过粘贴另一张图像来替代原图像的一部分；
    利用平均距离测量来比较 RGB 值。

实验环境
    Python 3.5
    Pillow-5.2.0
    numpy-1.14.5

要创建照片马赛克，就从目标图像的块状低分辨率开始（因为在高分辨率的图像中，小块图像的数量会太大）。该图像的分辨率将决定马赛克的维度 M*NM∗N（M 是行数，N 是列数）。接着，根据这种方法替换原始图像中的每一小块：
    1.读入一些小块图像，他们将取代原始图像中的小块；
    2.读入目标图像，将他们分割成 M*NM∗N 的小块网格；
    3.对于目标图像中的每个小块，从输入的小块图像中找到最佳匹配；
    4.将选择的输入图像安排在 M*N M∗N 的网格中，创建最终的照片马赛克。




平均颜色值
图像中的每个像素都有颜色，由它的红、绿、蓝值来表示。在这个例子中，使用 8 位的图像，因此每个部分都有 8 位值，范围在 [0,255]。如果一副图像共有 N 个像素，平均 RGB 计算如下：
_______
(r,g,b)=((r1+r2+...+rN)/N,(r1+r2+...+rN)/N,(r1+r2+...+rN)/N)
请注意，平均 RGB 也是一个三元组，不是标量或一个数字，因为平均值是针对每个颜色成分分别计算的。计算平均 RGB 是为了匹配图像小块和目标图像。


匹配图像
对于目标图像中的每个小块，需要在用户指定的输入文件夹下的图像中找到一幅匹配的图像。要确定两个图像是否匹配，可以通过比较平均 RGB 值，最匹配的图像就是平均 RGB 值最接近的图像。

要做到这一点，最简单的方法是计算一个像素中 RGB 值之间的距离，以便从输入图像中找到最佳匹配。对于几何中的三维点，可以用以下的距离计算方法：
D1,2=根号(r1-r2)平方+(g1-g2)平方+(b1-b2)平方
这里计算了点 (r_1,g_1,b_1)(r1,g1,b1) 和 (r_2,g_2,b_2)(r2,g2,b2) 之间的距离。给定一个目标图像的平均 RGB 值，以及来自输入图像的平均 RGB 值列表，你可以使用线性搜索和三维点距离的计算，来找到最匹配的图像。









